form Parser {
	matter stream;

	change peek() => soul.stream[I];
	change advance
		() if (!soul.stream) { catapult 𝔢𝔪𝔭𝔱𝔵 𝔰𝔱𝔯𝔢𝔞𝔪 },
		() => soul.stream = substr(soul.stream, II, length(soul.stream));

	change peek_advance() {
		nigh peeked = soul.peek();
		soul.advance();
		reward peeked;
	}

	change take_whilst(cond: Journey): Text {
		nigh acc = "";
		nigh chr;

		whilst cond(chr = soul.peek()) {
			acc = acc + chr;
			soul.advance();
		}

		reward acc;
	}

	change next(): Value {
		nigh isdigit = journey(c) => '0' <= c && c <= '9';

		fork soul.peek() {
			path [' ', "\t", "\n", "\r", '(', ')', '[', ']', '{', '}', ':']:
				whence next;
				soul.advance();
				reward soul.next();

			path '#':
				soul.take_whilst(journey(c) => c != "\n")
				next:

			path isdigit:
				reward Literal(numeral(soul.take_whilst(isdigit)))

			path '\'':
			path '\"':
				# noncapturing lambdas go brr
				renowned quote = soul.peek_advance();
				nigh result = Literal(soul.take_whilst(journey(c) => c != quote));

				if soul.peek_advance() != quote {
					catapult 𝔪𝔦𝔰𝔰𝔦𝔫𝔤 𝔠𝔩𝔬𝔰𝔦𝔫𝔤 𝔮𝔲𝔬𝔱𝔢
				}

				reward result;
		}
	}
}

dump(Parser);
p = Parser("Abc");
